package {{rootPackage}};

import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import io.vertx.core.AbstractVerticle;
import io.vertx.core.AsyncResult;
import io.vertx.core.CompositeFuture;
import io.vertx.core.Future;
import io.vertx.core.Handler;
import io.vertx.core.Vertx;
import io.vertx.core.http.HttpServerOptions;
import io.vertx.core.json.Json;
import io.vertx.core.logging.Logger;
import io.vertx.core.logging.LoggerFactory;
import io.vertx.ext.auth.AuthProvider;
import io.vertx.ext.auth.oauth2.OAuth2Auth;
import io.vertx.ext.auth.oauth2.OAuth2ClientOptions;
import io.vertx.ext.auth.oauth2.OAuth2FlowType;
import io.vertx.ext.web.api.contract.openapi3.OpenAPI3RouterFactory;
import io.vertx.ext.web.handler.BasicAuthHandler;
import io.vertx.ext.web.handler.OAuth2AuthHandler;
import io.vertx.ext.web.Router;
import java.util.ArrayList;
import java.util.List;

import {{rootPackage}}.Api;
import {{rootPackage}}.ApiRegistry;
import {{rootPackage}}.ApiMessageBuilderRegistry;
import {{rootPackage}}.AuthProviderRegistry;
import {{rootPackage}}.RouteHandler;

public class MainApiVerticle extends AbstractVerticle {
    final static Logger LOGGER = LoggerFactory.getLogger(MainApiVerticle.class);
    final static Integer DEFAULT_HTTP_PORT = Integer.parseInt(System.getProperty("default.http.port", "8080"));

    protected void initApis(Vertx vertx) throws Exception {
        {{#apiInfo}}{{#apis}}
        ApiRegistry.getInstance()
            .register("{{apiPackage}}.{{classname}}Impl",
                      (Api) getClass().getClassLoader().loadClass("{{package}}.{{classname}}Impl").newInstance());
        {{/apis}}{{/apiInfo}}
    }

    protected void initMessageBuilders(Vertx vertx) throws Exception {
        {{#apiInfo}}{{#apis}}
        {{#operations}}{{#operation}}
        String {{operationId}}OperationId = "{{operationId}}";
        ApiMessageBuilderRegistry.getInstance()
            .register({{operationId}}OperationId,
                      new {{apiPackage}}.{{classname}}MessageBuilderImpl({{operationId}}OperationId));
        {{/operation}}{{/operations}}
        {{/apis}}{{/apiInfo}}
    }

    protected Router createRouter(Vertx vertx, OpenAPI3RouterFactory openAPI3RouterFactory) {
        {{#apiInfo}}{{#apis}}
        {{#operations}}{{#operation}}
        String {{operationId}}OperationId = "{{operationId}}";
        openAPI3RouterFactory.addHandlerByOperationId({{operationId}}OperationId, new RouteHandler(vertx, {{operationId}}OperationId));
        {{/operation}}{{/operations}}
        {{/apis}}{{/apiInfo}}
        {{#authMethods}}
        {{#isOAuth}}
          {{#scopes}}
        openAPI3RouterFactory.addSecurityHandler("{{name}}:{{scope}}",
            OAuth2AuthHandler.create(AuthProviderRegistry.getInstance().get("{{name}}:{{scope}}")));
          {{/scopes}}
          {{^scopes}}
        openAPI3RouterFactory.addSecurityHandler("{{name}}", OAuth2AuthHandler.create((OAuth2Auth){{name}}AuthProvider));
          {{/scopes}}
        {{/isOAuth}}
        {{^isOAuth}}
        AuthProvider {{name}}AuthProvider = AuthProviderRegistry.getInstance().get("{{name}}");
        if ({{name}}AuthProvider != null) {
          {{#isApiKey}}
            {{#isKeyInHeader}}
            openAPI3RouterFactory.addSecurityHandler("{{name}}", ApiKeyAuthHandler.create({{name}}AuthProvider, ApiKeyAuthHandler.Location.HEADER, "{{keyParamName}}"));
            {{/isKeyInHeader}}
            {{#isKeyInQuery}}
            openAPI3RouterFactory.addSecurityHandler("{{name}}", ApiKeyAuthHandler.create({{name}}AuthProvider, ApiKeyAuthHandler.Location.QUERY, "{{keyParamName}}"));
            {{/isKeyInQuery}}
          {{/isApiKey}}
          {{#isBasic}}
            openAPI3RouterFactory.addSecurityHandler("{{name}}", BasicAuthHandler.create({{name}}AuthProvider));
          {{/isBasic}}
        }
        {{/isOAuth}}

        {{/authMethods}}
        return openAPI3RouterFactory.getRouter();
    }

    protected HttpServerOptions createHttpServerOptions(Vertx vertx) {
        HttpServerOptions httpServerOptions = new HttpServerOptions();

        Integer serverPort = vertx.getOrCreateContext().config().getInteger("http.port", DEFAULT_HTTP_PORT);
        httpServerOptions.setPort(serverPort);

        return httpServerOptions;
    }

    @Override
    public void start(Future<Void> startFuture) throws Exception {
        Json.mapper.registerModule(new JavaTimeModule());
        OpenAPI3RouterFactory.create(vertx, "openapi.json", handler -> {
            try {
                if (handler.succeeded()) {
                    Router router = createRouter(vertx, handler.result());

                    initApis(vertx);
                    initMessageBuilders(vertx);
                    deployVerticles(startFuture);

                    HttpServerOptions httpServerOptions = createHttpServerOptions(vertx);
                    vertx.createHttpServer(httpServerOptions)
                        .requestHandler(router::accept)
                        .listen(listenHandler -> {
                            if (listenHandler.succeeded()) {
                                startFuture.complete();
                            } else {
                                startFuture.fail(listenHandler.cause());
                            }
                        });
                } else {
                    startFuture.fail(handler.cause());
                }
            } catch (Throwable e) {
                LOGGER.error("MainApiVerticle : start failure", e);
                startFuture.fail(e);
            }
        });
    }

    public void deployVerticles(Future<Void> startFuture) {
        List<Future> deploymentFutures = new ArrayList<>();

        {{#apiInfo}}{{#apis}}
        Handler<AsyncResult<String>> {{classname}}Handler = res -> {
            if (!res.succeeded()) {
                LOGGER.error("{{classname}}Verticle : Deployment failed");
            }
        };
        Future<String> {{classname}}Future = Future.future();
        vertx.deployVerticle("{{apiPackage}}.{{classname}}Verticle", {{classname}}Future.completer());
        deploymentFutures.add({{classname}}Future);

        CompositeFuture.all(deploymentFutures).setHandler(res -> {
            if (res.succeeded()) {
                res.result().list().forEach(id -> LOGGER.info("Deployed [id: " + id + "]"));
            } else {
                LOGGER.error("{{classname}}Verticle : Deployment failed [cause: " + res.cause() + "]");
                startFuture.fail(res.cause());
            }
        });
        {{/apis}}{{/apiInfo}}
    }
}
